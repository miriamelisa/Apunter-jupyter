/*--------------------------------------------*/
/*         FUNCIONES UTILES SQL               */
/*--------------------------------------------*/

VERSION() - MUESTRA LA VERSION
CURRENTE_DATE() - FECHA ACTUAL
NOW() - FECHA Y HORA
USER() - USUARIO ACTIVO
SELECT version()
CURRENT_DATE()
NOW()

SELECT (5+2)/4;
SELECT 8 div 2 /* DIVISION ENTERA*/, 10 mod 4 /* RESTO DE LA DIVISIÓN */, 5/2;
SELECT 8/2 DIVISION_REAL, 5 div 2 DIVISION_ENTERO, 9 mod 2 RESTO; #NOMBRAR LAS OPERACIONES
SELECT 15 >> 1 BITS_DERECHA, 15 << 1 BITS_IZQUIERDA, 15 | 10 SUMA_BIT_A_BIT, 15 & 10 PRODUCTO_BIT_A_BIT, 15 ^ 10 XOR; #OPERACIONES COMPLEJAS
SELECT (5+8)>(3*7); #RESULTADO 0 FALSO - 1 VERDADERO
SELECT DATE_SUB(NOW(), INTERVAL 20 YEAR); #LA FECHA ACTUAL MENOS 20 AÑOS
SELECT DATE_ADD(NOW(), INTERVAL 10 YEAR); #LA FECHA ACTUAL MAS 10 AÑOS
SELECT DATEDIFF(NOW(),'1980-03-10'/* FECHA DE NACIMIENTO*/)/365; /* CUANTO AÑOS DE EDAD TIENES AHORA */
SELECT PI();
SELECT MOD(10,2);
SELECT character_length('PEPE');
SELECT ABS(-10);
SELECT SQRT(225);
SELECT BIN(2017);
SELECT CHAR(64);
SELECT CONCAT('PEDRO ', 'DISEÑO WEB ', '04-FEB-2017');
SELECT NOW();
SELECT CURDATE();
SELECT CURRENT_TIME();
SELECT CURRENT_DATE();
SELECT USER();
SELECT SYSDATE();
SELECT DATE_FORMAT(SYSDATE(), '%T') ;
SELECT DATABASE();
SELECT VERSION();


/*--------------------------------------------*/
/*               FUNCIONES                    */
/*--------------------------------------------*/

/* ----------- ESTRUCTURAS DE CONTROL ------------------------------ */

	IF... THEN 

		IF fecha_nac =< '1-01-1980' THEN   
		  Salario = Salario * 1.05;
		END IF;
		
		Se pueden anidar varias instrucciones:

			IF fecha_nac < '1-01-1980' THEN
			  IF apellido ='PEREZ' THEN
				salario = salario * 1.05;
			  END IF;
			END IF;

	IF - THEN - ELSE #-----------------------------------------

		IF fecha_nac <'1-01-1980' THEN
		  salario= salario * 1.05;
		ELSE
		  salario= salario* 1.02;
		END IF;
	
	IF - THEN - ELSEIF #----------------------------------------
	
	PARAMETROS ()
	
	RETURNS VARCHAR(40)
    IF a > m THEN 
			SET x = '>';
			ELSEIF n = m THEN
			SET x = '=';
	ELSE 
			SET x = '<';
    END IF;

    SET x = CONCAT(a, ' ', x, ' ', b);

    RETURN x;

	CASE #-------------------------------------------------------

		CASE VAR
		  WHEN CONDICION THEN CONDICION1/bloque de instrucciones
		  WHEN CONDICION THEN CONDICION2/bloque de instrucciones
		  WHEN CONDICION THEN CONDICION3/bloque de instrucciones
		  WHEN CONDICION THEN CONDICION4/bloque de instrucciones
		  ELSE QUE HACE CUANDO INCUMPLE CONDICIONES 
		END
	
	WHILE #-----------------------------------------------------------
	
		WHILE CONDICION DO
			SENTENCIAS
		END WHILE
		
		WHILE CONDICION LOOP
			SENTENCIAS
		END LOOP

	LOOP #--------------------------------------------------

		LOOP
		  SENTENCIAS
		  IF (CONDICION) THEN
			SENTENCIAS
			EXIT;
		  END IF;
		END LOOP;
	
		FOR CONTADOR IN [REVERSE] INICIO..FIN LOOP
		   SENTENCIAS
		END LOOP;
		
		ITERATE /* SOLO PUEDE APARECER EN DENTRO DE WHILE,REPEAT O LOOP, SIGNIFICA REPITE OTRA VEZ*/
		ITERATE etiqueta
		

		
/* ------------------------ FUNCIONES ----------------------*/

/* SOLUCION COMPILACIÓN FUNCTION */ 

- PONER DETERMINIST, NO SQL o READS SQL DATA 

- SET GLOBAL log_bin_trust_function_creators = 1;

/*-------------------------------*/

https://dev.mysql.com/doc/refman/5.7/en/functions.html /*

/*-------------------------------*/


CREATE FUNCTION `CUADRADO`(DATO INT) RETURNS INT
BEGIN
	RETURN DATO * DATO;
END

-------------------------------------------------------------

CREATE FUNCTION `HOLA`(SALUDO CHAR(20)) RETURNS CHAR(100)
BEGIN
		DECLARE RESULTADO CHARACTER(50);
        SET RESULTADO=CONCAT('HOLA, ',SALUDO);
		
	RETURN RESULTADO;
END

-------------------------------------------------------------

CREATE FUNCTION `AREA_TRIANGULO`(BASE INT, ALTURA INT) 
RETURNS CHAR(100)
BEGIN
		DECLARE area INTEGER;
        DECLARE resultado CHARACTER(50);
        SET area=(base * altura)/2;
        SET resultado=CONCAT('Area: ',area);
	RETURN resultado;
END

--------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `DIASEMANA`(FECHA DATE) 
RETURNS char(30) CHARSET utf8mb4
BEGIN
	DECLARE RESULTADO CHAR(20);
    DECLARE DIA INTEGER;
    SET DIA = weekday(FECHA);
		CASE DIA
		  WHEN 0 THEN SET RESULTADO = 'LUNES';
		  WHEN 1 THEN SET RESULTADO = 'MARTES';
		  WHEN 2 THEN SET RESULTADO = 'MIERCOLES';
		  WHEN 3 THEN SET RESULTADO = 'JUEVES';
		  WHEN 4 THEN SET RESULTADO = 'VIERNES';
		  WHEN 5 THEN SET RESULTADO = 'SABADO';
		  WHEN 6 THEN SET RESULTADO = 'DOMINGO';
		  ELSE SET RESULTADO = 'FECHA NO VALIDA';
		END CASE;
	RETURN RESULTADO;
END

--------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `NOTALETRA`(NOTA DOUBLE) 
RETURNS char(30) CHARSET utf8mb4
BEGIN
	DECLARE NOTAFINAL CHAR(30);
    IF ((NOTA>=0) && (NOTA<=10)) THEN
		IF (NOTA<5) THEN
			SET NOTAFINAL = 'SUSPENSO';
		ELSEIF (NOTA<6) THEN
			SET NOTAFINAL = 'SUFICIENTE';
		ELSEIF (NOTA<7) THEN
			SET NOTAFINAL = 'BIEN';
		ELSEIF (NOTA<9) THEN
			SET NOTAFINAL = 'NOTABLE';
		ELSEIF (NOTA<10) THEN
			SET NOTAFINAL = 'SOBRE';
		END IF;
    ELSE
		SET NOTAFINAL = 'LA NOTA INTRODUCIDA ES ERRONEA';
    END IF;
	RETURN NOTAFINAL;
END

-------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `NOTAMEDIA`(NOT1 DOUBLE,NOT2 DOUBLE,NOT3 DOUBLE,NOT4 DOUBLE) RETURNS double
BEGIN
	DECLARE MED DOUBLE;
    
    SET MED = (NOT1+NOT2+NOT3+NOT4)/4;

	RETURN MED;
END

-------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `CONTACTO`(CODIGO INT)
RETURNS char(50) CHARSET utf8mb4
BEGIN

	DECLARE MES CHAR(10);
    DECLARE PROV CHAR(2);
    DECLARE TEL CHAR(10);
	DECLARE INICIALES CHAR(50);
    DECLARE RESULTADO CHAR(100);
    
    SET MES = (SELECT monthname(MATRICULA) FROM ALUMNOS WHERE COD=CODIGO);
	SET PROV = (SELECT LEFT(CP,2) FROM ALUMNOS WHERE COD=CODIGO);
	SET TEL = (SELECT RIGHT(TLF,7) FROM ALUMNOS WHERE COD=CODIGO);
    SET INICIALES = (SELECT UPPER(CONCAT(LEFT(NOMBRE,1),LEFT(APEL1,1), 
	LEFT(APEL2,1))) FROM ALUMNOS WHERE COD=CODIGO);

	SET RESULTADO = CONCAT(INICIALES,' - ',MES,' - ',PROV,' - ',TEL);
    
	RETURN RESULTADO;
END

-------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `EDADALUMNO`(CODIGO INT)
RETURNS char(200) CHARSET utf8mb4
BEGIN
	DECLARE RESULTADO CHAR(100);
    SET RESULTADO = (SELECT ROUND(DATEDIFF(NOW(),FNACI)/365,2) FROM ALUMNOS WHERE COD=CODIGO);
	RETURN RESULTADO;
END

-------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `CODPROVINCIA`(CP1 CHAR(5))
RETURNS char(100) CHARSET latin1
BEGIN

	DECLARE CP2 CHAR(2);
	DECLARE CPLET CHAR(100);
	SET CP2 = (LEFT(CP1,2));

	IF (CP2 = "28") THEN
		SET CPLET = "Madrid";
	ELSEIF (CP2 = "05") THEN
		SET CPLET = "Ávila";
	END IF;

	RETURN CPLET;
END

----------------------------------------------------------------


CREATE DEFINER=`root`@`localhost` FUNCTION `MEDIA`(NOTA1 DOUBLE, NOTA2 DOUBLE) 
RETURNS double
BEGIN

	DECLARE MEDIA DOUBLE;
    SET MEDIA = ROUND((NOTA1+NOTA2)/2,2);

RETURN MEDIA;
END

-----------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `CUADRADO`(LADO DOUBLE) RETURNS char(100) CHARSET utf8mb4
BEGIN
	DECLARE AREAC DOUBLE;
    SET AREAC = LADO * LADO;  
RETURN CONCAT("EL AREA ES ",AREAC);
END

------------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `DIASEMANA`(FECHA DATE) RETURNS char(30) CHARSET utf8mb4
BEGIN
	DECLARE RESULTADO CHAR(20);
    DECLARE DIA INTEGER;
    SET DIA = WEEKDAY(FECHA);
		CASE DIA
			WHEN 0 THEN SET RESULTADO="LUNES";
			WHEN 1 THEN SET RESULTADO="MARTES";
			WHEN 2 THEN SET RESULTADO="MIERCOLES";
			WHEN 3 THEN SET RESULTADO="JUEVES";
			WHEN 4 THEN SET RESULTADO="VIERNES";
			WHEN 5 THEN SET RESULTADO="SABADO";
			WHEN 6 THEN SET RESULTADO="DOMINGO";
            ELSE SET RESULTADO='FECHA NO VALIDAD';
		END CASE;
RETURN RESULTADO;
END

/*    FUNCIONES Y PROCEDIMIENTOS     */ 

CREATE DEFINER=`root`@`localhost` FUNCTION `CALCULO_EDAD`(FECHA DATE) RETURNS double
BEGIN
	DECLARE SALIDA DOUBLE;
    SET SALIDA = ROUND(datediff(NOW(),FECHA)/365,2);
RETURN SALIDA;
END


CREATE DEFINER=`root`@`localhost` FUNCTION `GENCLAVE`(NOMBRE CHAR(50),APELLIDO CHAR(50),FECHA DATE)
RETURNS char(15) CHARSET utf8mb4
BEGIN
	DECLARE CLAVE CHAR(15);
    SET CLAVE = CONCAT_WS('-',LOWER(LEFT(NOMBRE,1)),LOWER(RIGHT(APELLIDO,2)),YEAR(FECHA)-MONTH(FECHA));
RETURN CLAVE;
END


CREATE DEFINER=`root`@`localhost` PROCEDURE `ACTUALIZAR`()
BEGIN
	DECLARE EDADF DOUBLE;
	DECLARE CONTADOR INT;
    DECLARE REG INT;
    
    SET CONTADOR = 1;
    SET REG = (SELECT MAX(COD) FROM USUARIOS);
    
    WHILE CONTADOR <= REG DO
		SET EDADF = (SELECT CALCULO_EDAD(FNACI) FROM USUARIOS WHERE COD=CONTADOR);
		UPDATE USUARIOS SET EDAD = EDADF WHERE COD = CONTADOR;
		SET CONTADOR = CONTADOR + 1;
    END WHILE;
END

/* -------------------------------------- */
/*      EJEMPLO COMPLETO FORMACION        */
/* -------------------------------------- */

CREATE DATABASE FORMACION;
USE FORMACION;

CREATE TABLE ALUMNOS(
	COD INT PRIMARY KEY AUTO_INCREMENT,
    NOMBRE VARCHAR(100),
    APELLIDOS VARCHAR(100),
    FNACI DATE,
    NOTA1 DOUBLE,
    NOTA2 DOUBLE,
    FINAL DOUBLE,
    CEXP VARCHAR(15)
);

INSERT INTO ALUMNOS (NOMBRE,APELLIDOS,FNACI,NOTA1,NOTA2) VALUES 
('ANDREA','ALVAREZ','2002-12-01',5.5,9.0);

SELECT  * FROM ALUMNOS;

CREATE TABLE ACTAS (
	CODIGO INTEGER,
    APELNOM CHAR(100),
    NOTA DOUBLE,
    CODEXP  CHAR(15)
);

CREATE DEFINER=`root`@`localhost` PROCEDURE `EVALUADOR`()
BEGIN
	DECLARE MEDIA DOUBLE;
    DECLARE N1 DOUBLE;
    DECLARE N2 DOUBLE;
    DECLARE CODIGOE VARCHAR(20);
    DECLARE CONTADOR INTEGER;
    DECLARE REG INTEGER;
    
    SET CONTADOR = 1;
    SET REG = (SELECT MAX(COD) FROM ALUMNOS);
    
		WHILE CONTADOR<=REG DO
        
			SET N1 = (SELECT NOTA1 FROM ALUMNOS WHERE COD=CONTADOR);
			SET N2 = (SELECT NOTA2 FROM ALUMNOS WHERE COD=CONTADOR);
            SET MEDIA = (N1+N2)/2;
            
            UPDATE ALUMNOS SET FINAL=MEDIA WHERE COD=CONTADOR;
            
            SET CODIGOE = (SELECT concat_ws('-',LEFT(NOMBRE,2),LEFT(APELLIDOS,2),YEAR(FNACI)) 
            FROM ALUMNOS WHERE COD=CONTADOR);
  
            UPDATE ALUMNOS SET CEXP=CODIGOE WHERE COD=CONTADOR;
            
            INSERT INTO ACTAS (CODIGO,APELNOM,NOTA,CODEXP) VALUES ((SELECT COD FROM ALUMNOS WHERE COD=CONTADOR),'PEPE',MEDIA,CODIGOE);
            
            SET CONTADOR = CONTADOR + 1;      
        END WHILE;
 END
 
 /* ------------------------------------ */
 /* ------------- TRIGGERS ------------- */
 /* ------------------------------------ */
 
 CUANDO
• BEFORE ANTES DE QUE OCURRA EL EVENTO
• AFTER  DESPUÉS DE QUE OCURRA EL EVENTO

 EVENTO
• INSERT
• UPDATE 
• DELETE

TRIGGER_TYPE
• FOR EACH ROW  -- PARA TODOS LOS REGISTROS
• FOR EACH STATEMENT -- PARA TODOS LOS ESTAMENTOS
 
CREATE DATABASE CAMPUSFP;
USE CAMPUSFP;

CREATE TABLE ALUMNOS (
ID INT PRIMARY KEY AUTO_INCREMENT,
NOMBRE VARCHAR(20) NOT NULL,
APEL1 VARCHAR(20) NOT NULL,
APEL2 VARCHAR(20) NOT NULL,
FNACI DATE,
EDAD DOUBLE,
EX1 DOUBLE,
EX2 DOUBLE,
EX3 DOUBLE,
NOTA DOUBLE,
CALIFICACION VARCHAR(20)
);

CREATE TABLE ACTAS (
ID INT PRIMARY KEY AUTO_INCREMENT,
APELNOM VARCHAR(60) NOT NULL,
EVALUCION VARCHAR(20),
FECHA DATE
);

CREATE TABLE RECUPERACIONES (
ID INT PRIMARY KEY AUTO_INCREMENT,
APELLIDOSNOM VARCHAR(60) NOT NULL,
NOTA DOUBLE,
FECHA DATE
);

INSERT INTO ALUMNOS (NOMBRE,APEL1,APEL2,FNACI,EX1,EX2,EX3) VALUES 
('PEDRO','LOPEZ', 'ALVAREZ', '2001-01-01','5.5','6.70','7.5'),
('PEPE','LOPEZ', 'ALVAREZ', '2003-10-20','8.5','7.70','7.5'),
('RAMIRO','LOPEZ', 'ALVAREZ', '2001-01-01','5.5','5.70','2.5'),
('ALBERTO','LOPEZ', 'ALVAREZ', '2010-05-01','5.5','6.70','9.5'),
('LUIS','LOPEZ', 'ALVAREZ', '2006-08-01','3.5','4.70','9.5'),
('ANA','LOPEZ', 'ALVAREZ', '2003-12-01','1.5','5.70','7.5');

SELECT * FROM ALUMNOS;
SELECT * FROM ACTAS;
SELECT * FROM RECUPERACIONES;

UPDATE ALUMNOS SET NOTA = 0.0;

SET SQL_SAFE_UPDATES=0;




DELIMITER //
CREATE TRIGGER EVALUA
BEFORE UPDATE ON ALUMNOS FOR EACH ROW
BEGIN

	SET NEW.CALIFICACION = (SELECT NOTALETRA(NEW.NOTA));

	IF NEW.CALIFICACION <> 'Suspenso' THEN
		INSERT INTO ACTAS VALUES (null,NEW.NOMBRE,NEW.NOTA,SYSDATE());
    END IF;
    
	IF NEW.CALIFICACION = 'Suspenso' THEN
		INSERT INTO RECUPERACIONES VALUES (null,NEW.NOMBRE,NEW.NOTA,SYSDATE());
    END IF;
	
END//
DELIMITER ;






DROP TRIGGER EVALUA;

SHOW TRIGGERS;


CREATE TABLE CONTACTADOS(
	COD INTEGER NOT NULL auto_increment,
    NOMBRE VARCHAR(20) NOT NULL,
    FNACI DATE,
    CONSTRAINT CONTACTOS_CS PRIMARY KEY (COD)
);

CREATE TABLE REGISTROS(
ID INT NOT NULL,
FECHA DATE,
USUARI VARCHAR(30)
);

/*----------------------------------------------------------*/

DELIMITER //
CREATE TRIGGER CONTACTADOS_AFTER
AFTER INSERT
   ON CONTACTADOS FOR EACH ROW
BEGIN

   DECLARE USUARIO varchar(50);

   SELECT USER() INTO USUARIO;

   INSERT INTO REGISTROS( ID,FECHA,USUARI) VALUES ( NEW.COD,SYSDATE(),USUARIO );

END; // 

DELIMITER ;

/*------------------------------------------------------------*/

SELECT USER();
SHOW TRIGGERS;
SELECT * FROM CONTACTADOS;
SELECT * FROM REGISTROS;

INSERT INTO CONTACTADOS ( NOMBRE, FNACI) VALUES ( 'RATATUI', SYSDATE() );

DELIMITER //
CREATE TRIGGER UPDATE_FNACI 
	BEFORE UPDATE ON CONTACTADOS
FOR EACH ROW
BEGIN
	IF NEW.FNACI > '2019-01-01' THEN
		SET NEW.FNACI = '2018-12-31';
    END IF;
END;//
DELIMITER ;

UPDATE CONTACTADOS SET FNACI='2019-03-01' WHERE COD=1;

/*-------------------------- TRIGGERS - LANZADORES -----------------------------*/

SHOW TRIGGERS;
DROP TRIGGER [IF EXISTS] NOMBRE_TRIGGER;
DROP TRIGGER BASE_DE_DATOS.NOMBRE_TRIGGER;

---------------------------------------------------------------------------------
CREATE TABLE PRUEBA1(C1 INT);
CREATE TABLE PRUEBA2(C2 INT);
CREATE TABLE PRUEBA3(C3 INT NOT NULL AUTO_INCREMENT PRIMARY KEY);
CREATE TABLE PRUEBA4(
  C4 INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
  B4 INT DEFAULT 0
);

DELIMITER | /*PUEDE SER*/ DELIMITER //

CREATE TRIGGER LANZADOR BEFORE INSERT ON PRUEBA1
  FOR EACH ROW BEGIN
    INSERT INTO PRUEBA2 SET C2 = NEW.C1;
    DELETE FROM PRUEBA3 WHERE C3 = NEW.C1;  
    UPDATE PRUEBA4 SET B4 = B4 + 1 WHERE C4 = NEW.C1;
  END //

DELIMITER;

INSERT INTO PRUEBA3 (C3) VALUES 
  (NULL), (NULL), (NULL), (NULL), (NULL), 
  (NULL), (NULL), (NULL), (NULL), (NULL);

INSERT INTO PRUEBA4 (C4) VALUES 
  (0), (0), (0), (0), (0), (0), (0), (0), (0), (0);
  
  --------------------------   DESPUES LANZAR -----------------------------
  
INSERT INTO PRUEBA1 VALUES (2), (8), (6), (8), (3), (5), (3), (6);

----------------------------   EJECUTAR - VER RESULTADOS ------------------

SELECT * FROM PRUEBA1;

SELECT * FROM PRUEBA2;

SELECT * FROM PRUEBA3;

SELECT * FROM PRUEBA4;

-----------------------------------------------------------------------------

/* TRIGGERS PARA UPDATE */

DELIMITER //
CREATE TRIGGER CLIENTE
BEFORE UPDATE ON CLIENTE FOR EACH ROW
BEGIN
	IF NEW.EDAD<0 THEN
		SET NEW.EDAD = NULL;
	END IF;
END;
DELIMITER;

DELIMITER //
CREATE TRIGGER PEDIDOS
BEFORE UPDATE ON PEDIDO
FOR EACH ROW
BEGIN
	UPDATE TOTAL_VENTAS
		SET total=total+(NEW.total-OLD.total)
	WHERE idcliente=NEW.idcliente;
END
DELIMITER;

DELIMITER //
CREATE TRIGGER FACTURAS
AFTER UPDATE ON FACTURA FOR EACH ROW
BEGIN
	INSERT INTO LOG_ACTUALIZACION (idusuario, descripcion)
	VALUES (user(), CONCAT('Se produjeron cambios en el registro ','(',
	OLD.iddetalle,',', OLD.idfactura,',',OLD.idproducto,',',
	OLD.precio,',', OLD.unidades,') por ',
	'(', NEW.iddetalle,',', NEW.idfactura,',',NEW.idproducto,',',
	NEW.precio,',', NEW.unidades,')'));
END;
DELIMITER;

/* TRIGGERS PARA INSERT */

DELIMITER //
CREATE TRIGGER PEDIDOS
BEFORE INSERT ON PEDIDO
FOR EACH ROW
BEGIN
DECLARE NUM_FILAS INT;
	SELECT COUNT(*)
	INTO NUM_FILAS
	FROM TOTAL_VENTAS
	WHERE CODCLIENTE=NEW.CODCLIENTE;
		IF NUM_FILAS > 0 THEN
		UPDATE TOTAL_VENTAS
		SET TOTAL=TOTAL+NEW.TOTAL
		WHERE CODCLIENTE=NEW.CODCLIENTE;
		ELSE
		INSERT INTO TOTAL_VENTAS
		(CODCLIENTE,TOTAL)
		VALUES(NEW.CODCLIENTE,NEW.TOTAL);
		END IF;
END
DELIMITER;

/* TRIGGERS PARA DELETE */

CREATE TRIGGER PEDIDO_BD_TRIGGER
BEFORE DELETE ON PEDIDO
FOR EACH ROW
BEGIN
	UPDATE TOTAL_VENTAS
	SET total=total-OLD.total
	WHERE idcliente=OLD.idcliente;
END//

/* ------------------------------------------------------------------------------ 
   --                EJEMPLO COMPLETO FUNCIONES Y TRIGGERS                     --
   ------------------------------------------------------------------------------*/

CREATE DATABASE CAMPUSFP;
USE CAMPUSFP;

CREATE TABLE ALUMNOS (
ID INT PRIMARY KEY AUTO_INCREMENT,
NOMBRE VARCHAR(20) NOT NULL,
APEL1 VARCHAR(20) NOT NULL,
APEL2 VARCHAR(20) NOT NULL,
FNACI DATE,
EDAD DOUBLE,
EX1 DOUBLE,
EX2 DOUBLE,
EX3 DOUBLE,
NOTA DOUBLE,
CALIFICACION VARCHAR(20)
);

CREATE TABLE ACTAS (
ID INT PRIMARY KEY AUTO_INCREMENT,
APELNOM VARCHAR(60) NOT NULL,
EVALUCION VARCHAR(20),
FECHA DATE
);

CREATE TABLE RECUPERACIONES (
ID INT PRIMARY KEY AUTO_INCREMENT,
APELLIDOSNOM VARCHAR(60) NOT NULL,
NOTA DOUBLE,
FECHA DATE
);

INSERT INTO ALUMNOS (NOMBRE,APEL1,APEL2,FNACI,EX1,EX2,EX3) VALUES 
('PEDRO','LOPEZ', 'ALVAREZ', '2001-01-01','5.5','6.70','7.5'),
('PEPE','LOPEZ', 'ALVAREZ', '2003-10-20','8.5','7.70','7.5'),
('RAMIRO','LOPEZ', 'ALVAREZ', '2001-01-01','5.5','5.70','2.5'),
('ALBERTO','LOPEZ', 'ALVAREZ', '2010-05-01','5.5','6.70','9.5'),
('LUIS','LOPEZ', 'ALVAREZ', '2006-08-01','3.5','4.70','9.5'),
('ANA','LOPEZ', 'ALVAREZ', '2003-12-01','1.5','5.70','7.5');

SELECT * FROM ALUMNOS;
SELECT * FROM ACTAS;
SELECT * FROM RECUPERACIONES;

SELECT MAX(ID) FROM ALUMNOS;
SET NACIMIENTO = (SELECT FNACI FROM ALUMNOS WHERE ID = 1);
SELECT EDADALUM((SELECT FNACI FROM ALUMNOS WHERE ID = 1));

UPDATE ALUMNOS SET NOTA = 0.0;

SET SQL_SAFE_UPDATES=0;
---------------------------------------------------------------------------

CREATE DEFINER=`root`@`localhost` FUNCTION `NOTALETRA`(NOTA DOUBLE) 
RETURNS char(30) CHARSET utf8mb4
BEGIN
	DECLARE RESULTADO CHAR(30);
    IF ((NOTA>=0) && (NOTA<=10)) THEN
		IF ((NOTA>=0) && (NOTA<4)) THEN
			SET RESULTADO = 'Deficiente';
		ELSEIF ((NOTA>=4) && (NOTA<5)) THEN
			SET RESULTADO = 'Suspenso';
		ELSEIF ((NOTA>=5) && (NOTA<6)) THEN
			SET RESULTADO = 'Sufiente';
		ELSEIF ((NOTA>=6) && (NOTA<7)) THEN
			SET RESULTADO = 'Bien';
		ELSEIF ((NOTA>=7) && (NOTA<9)) THEN
			SET RESULTADO = 'Notable';
		ELSEIF ((NOTA>=9) && (NOTA<10)) THEN
			SET RESULTADO = 'Sobresaliente';
		END IF;
    ELSE
		SET RESULTADO = 'LA NOTA INTRODUCIDA ES ERRONEA';
    END IF;
RETURN RESULTADO;
END

---------------------------------------------------------------------------
DELIMITER //
CREATE TRIGGER EVALUA
BEFORE UPDATE ON ALUMNOS FOR EACH ROW
BEGIN

	SET NEW.CALIFICACION = (SELECT NOTALETRA(NEW.NOTA));

	IF NEW.CALIFICACION <> 'Suspenso' THEN
		INSERT INTO ACTAS VALUES (null,NEW.NOMBRE,NEW.NOTA,SYSDATE());
    END IF;
    
	IF NEW.CALIFICACION = 'Suspenso' THEN
		INSERT INTO RECUPERACIONES VALUES (null,NEW.NOMBRE,NEW.NOTA,SYSDATE());
    END IF;
	
END//
DELIMITER ;

DROP TRIGGER EVALUA;

SHOW TRIGGERS;